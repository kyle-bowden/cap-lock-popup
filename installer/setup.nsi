; Script generated by the HM NIS Edit Script Wizard.
!include x64.nsh
!include LogicLib.nsh
!addplugindir "${NSISDIR}\Plugins"

; Define variables
!define APP_NAME "CapLockHook"
!define APP_VERSION "1.0"
!define INSTALL_DIR "$PROGRAMFILES\${APP_NAME}"
!define JavaRegKey 'HKLM "SOFTWARE\Intel" ""'
;!define JavaRegKey 'HKLM "SOFTWARE\WOW6432Node\JavaSoft\Java Runtime Environment" ""'

; Set the name and other properties of the installer
Name "${APP_NAME} ${APP_VERSION}"
OutFile "../target/${APP_NAME}.exe"
InstallDir "${INSTALL_DIR}"
RequestExecutionLevel admin
DirText "This will install CapLockHook on your computer. Choose a directory"

; Define the components to be installed
Section "Main Section" SEC01
    ; Set the installation files
    SetOutPath "${INSTALL_DIR}"
    File /r "I:\Development\Projects\Java\cap-locks-popup\target\CapLockHook.jar"

    ; Create Start menu shortcuts
    CreateDirectory "$SMPROGRAMS\${APP_NAME}"
    CreateShortCut "$SMPROGRAMS\${APP_NAME}\${APP_NAME}.lnk" "$INSTDIR\${APP_NAME}.exe"
    CreateShortCut "$SMPROGRAMS\${APP_NAME}\Uninstall.lnk" "$INSTDIR\uninstall.exe"
    CreateShortCut "$SMPROGRAMS\Startup\CapLockHook.lnk" "$INSTDIR\CapLockHook.jar" \
        "" "$INSTDIR\CapLockHook.jar" 2 SW_SHOWNORMAL \
        ALT|CTRL|SHIFT|F5 "a description"

    ; Define the uninstaller
    WriteUninstaller "$INSTDIR\uninstall.exe"
SectionEnd

Section "Uninstall"
    ; Add an uninstaller
    Delete $INSTDIR\uninstall.exe
    Delete $INSTDIR\CapLockHook.jar
    RMDir $INSTDIR

    ; Remove Start menu shortcuts
    Delete "$SMPROGRAMS\${APP_NAME}\${APP_NAME}.lnk"
    Delete "$SMPROGRAMS\${APP_NAME}\Uninstall.lnk"
    Delete "$SMPROGRAMS\Startup\CapLockHook.lnk"
    RMDIR  "$SMPROGRAMS\${APP_NAME}"
SectionEnd

Function .onInit

    ; Make sure the application is not running before installing
    ExpandEnvStrings $0 '%COMSPEC%'
    nsExec::ExecToStack 'cmd /c wmic process where $\"name like $\'%java%$\'$\" get commandline | Find $\"CapLockHook.jar$\"'
    Pop $0
    Pop $0
    Push $0
    Push "CapLockHook.jar"
    Call StrContains
    Pop $1
    StrCmp $1 "" notfound
      MessageBox MB_OK 'Please close the CapLockHook application before running the installer!'
      Quit
    notfound:
      Goto done
    done:

    ; Check that java runtime is installed
    ${If} ${RunningX64}
      SetRegView 64
      ReadRegStr $R0 HKLM "SOFTWARE\JavaSoft\Java Runtime Environment" "CurrentVersion"
      StrCmp $R0 "" currentnotfound currentnotfounddone
      currentnotfound:
        ReadRegStr $R0 HKLM "SOFTWARE\WOW6432Node\JavaSoft\Java Runtime Environment" "CurrentVersion"
        Goto currentnotfounddone
      currentnotfounddone:
      SetRegView LastUsed
    ${Else}
      ReadRegStr $R0 HKLM "SOFTWARE\JavaSoft\Java Runtime Environment" "CurrentVersion"
    ${EndIf}

    StrCmp $R0 "" JavaMissing JavaFound

    JavaFound:
    Goto JavaCheckDone

    JavaMissing:
    MessageBox MB_YESNO|MB_ICONQUESTION "You need to install Java to use this program, click yes to open the website to download and install Java? Once installed launch this installer again." IDNO +2
    ExecShell open "https://www.java.com/download"
    Quit

    JavaCheckDone:
FunctionEnd

Function .onInstSuccess
    ; Check that java runtime is installed
    ${If} ${RunningX64}
      SetRegView 64
      ReadRegStr $R1 HKLM 'SOFTWARE\JavaSoft\Java Runtime Environment\$R0' "JavaHome"
      StrCmp $R1 "" notfound done
        notfound:
          ReadRegStr $R1 HKLM 'SOFTWARE\WOW6432Node\JavaSoft\Java Runtime Environment\$R0' "JavaHome"
          Goto done
        done:
      SetRegView LastUsed
    ${Else}
      ReadRegStr $R1 HKLM 'SOFTWARE\JavaSoft\Java Runtime Environment\$R0' "JavaHome"
    ${EndIf}

    Exec '"$R1\bin\javaw.exe" -jar "$INSTDIR\CapLockHook.jar"'
FunctionEnd

; StrContains
; This function does a case sensitive searches for an occurrence of a substring in a string.
; It returns the substring if it is found.
; Otherwise it returns null("").
; Written by kenglish_hi
; Adapted from StrReplace written by dandaman32


Var STR_HAYSTACK
Var STR_NEEDLE
Var STR_CONTAINS_VAR_1
Var STR_CONTAINS_VAR_2
Var STR_CONTAINS_VAR_3
Var STR_CONTAINS_VAR_4
Var STR_RETURN_VAR

Function StrContains
  Exch $STR_NEEDLE
  Exch 1
  Exch $STR_HAYSTACK
  ; Uncomment to debug
  ;MessageBox MB_OK 'STR_NEEDLE = $STR_NEEDLE STR_HAYSTACK = $STR_HAYSTACK '
    StrCpy $STR_RETURN_VAR ""
    StrCpy $STR_CONTAINS_VAR_1 -1
    StrLen $STR_CONTAINS_VAR_2 $STR_NEEDLE
    StrLen $STR_CONTAINS_VAR_4 $STR_HAYSTACK
    loop:
      IntOp $STR_CONTAINS_VAR_1 $STR_CONTAINS_VAR_1 + 1
      StrCpy $STR_CONTAINS_VAR_3 $STR_HAYSTACK $STR_CONTAINS_VAR_2 $STR_CONTAINS_VAR_1
      StrCmp $STR_CONTAINS_VAR_3 $STR_NEEDLE found
      StrCmp $STR_CONTAINS_VAR_1 $STR_CONTAINS_VAR_4 done
      Goto loop
    found:
      StrCpy $STR_RETURN_VAR $STR_NEEDLE
      Goto done
    done:
   Pop $STR_NEEDLE ;Prevent "invalid opcode" errors and keep the
   Exch $STR_RETURN_VAR
FunctionEnd

!macro _StrContainsConstructor OUT NEEDLE HAYSTACK
  Push `${HAYSTACK}`
  Push `${NEEDLE}`
  Call StrContains
  Pop `${OUT}`
!macroend

!define StrContains '!insertmacro "_StrContainsConstructor"'
